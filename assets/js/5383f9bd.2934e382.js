"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2435],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,m=c["".concat(l,".").concat(d)]||c[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(5773),o=(n(7378),n(5318));const a={sidebar_position:30},i="output-formats.json",p={unversionedId:"project/output-formats.json",id:"project/output-formats.json",title:"output-formats.json",description:"Output configurations.",source:"@site/docs/project/output-formats.json.md",sourceDirName:"project",slug:"/project/output-formats.json",permalink:"/ai-writer/docs/project/output-formats.json",draft:!1,editUrl:"https://github.com/svdoever/ai-writer/tree/main/docs/docs/project/output-formats.json.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"docSidebar",previous:{title:"models.json",permalink:"/ai-writer/docs/project/models.json"},next:{title:"Advanced",permalink:"/ai-writer/docs/category/advanced"}},l={},s=[],u={toc:s},c="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"output-formatsjson"},"output-formats.json"),(0,o.kt)("p",null,"Output configurations."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"output-format.json")," file lives in the root of the project folder. This file contains definitions of output formats that can be used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"ai-writer")," command."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"output-formats.json")," file contains a JSON object with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "format-name": {\n        "extension": "extension",\n        "wrappedExtension": "wrapped-extension",\n        "wrapSize": 80\n    }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"extension")," field is the extension of the output file. The ",(0,o.kt)("inlineCode",{parentName:"p"},"wrappedExtension")," field is the extension of the wrapped output file. The ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapSize")," field is the number of characters per line in the wrapped output file."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"wrappedExtension")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapSize")," fields are optional. A ",(0,o.kt)("inlineCode",{parentName:"p"},"wrappedExtension")," is only relevant for text files. The ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapSize")," field is only relevant for text files and is used to wrap the output text file to a maximum number of characters per line.\nBy default, the `output-formats.json`` file contains the following output formats:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "txt": {\n        "extension": "txt",\n        "wrappedExtension": "wrapped.txt",\n        "wrapSize": 80\n    }\n}\n')),(0,o.kt)("p",null,"On execution of a recipe, the default output format can be overridden using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--output-format")," option of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ai-writer")," command. For example, to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"txt")," model, execute for example the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx ai-writer eli5 --topic elephant --output-format txt --output eli5/elephant\n")))}f.isMDXComponent=!0}}]);