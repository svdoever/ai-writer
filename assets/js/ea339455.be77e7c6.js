"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1099],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?o.createElement(f,a(a({ref:t},s),{},{components:n})):o.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(5773),r=(n(7378),n(5318));const i={sidebar_position:20},a="models.json",l={unversionedId:"project/models.json",id:"project/models.json",title:"models.json",description:"The available models.",source:"@site/docs/project/models.json.md",sourceDirName:"project",slug:"/project/models.json",permalink:"/ai-writer/docs/project/models.json",draft:!1,editUrl:"https://github.com/svdoever/ai-writer/tree/main/docs/docs/project/models.json.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"docSidebar",previous:{title:"The .env file",permalink:"/ai-writer/docs/project/dotenv"},next:{title:"output-formats.json",permalink:"/ai-writer/docs/project/output-formats.json"}},p={},c=[],s={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modelsjson"},"models.json"),(0,r.kt)("p",null,"The available models."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," file lives in the root of the project folder. This file contains OpenAI model configurations that can override fields of the default model configuration as defined in the",(0,r.kt)("a",{parentName:"p",href:"../recipes/recipe-ingredients/aiconfig.json"},(0,r.kt)("inlineCode",{parentName:"a"},"aiconfig.json"))," file in the recipe folder. "),(0,r.kt)("p",null,"Override the default model configuration using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--model-override")," option of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ai-writer")," command."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," file contains a JSON object with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "model-name": {\n    "type": "completion | chat.completion",\n    "completion": {\n        "model": "model-id",\n        "temperature": 0.7,\n        "max_tokens": 64,\n        "top_p": 1,\n        "frequency_penalty": 0,\n        "presence_penalty": 0\n    }\n  }\n}\n')),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"/ai-writer/docs/recipes/recipe-ingredients/aiconfig.json"},"aiconfig.json")," for more information about the model configuration fields."),(0,r.kt)("p",null,"All fields are optional, and the specified fields are merged with the default model configuration. The ",(0,r.kt)("inlineCode",{parentName:"p"},"stop")," field is an array of strings that are used to stop the completion.\nBy default, the `models.json`` file contains the following model overrides for easy switching between the OpenAI models:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "gpt-4": {\n        "type": "chat.completion",\n        "completion": {\n            "model": "gpt-4"\n        }\n    },\n    "gpt-35": {\n        "type": "chat.completion",\n        "completion": {\n            "model": "gpt-3.5-turbo"\n        }\n    },\n\n    "davinci": {\n        "type": "completion",\n        "completion": {\n            "model": "text-davinci-003"\n        }\n    }\n}\n')),(0,r.kt)("p",null,"On execution of a recipe, the default model configuration can be overridden using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--model-override")," option of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ai-writer")," command. For example, to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-4")," model, execute the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx ai-writer eli5 --topic elephant --model-override gpt-4 --output eli5/elephant\n")))}m.isMDXComponent=!0}}]);