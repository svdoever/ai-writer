"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1099],{5318:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=d(t),u=r,f=s["".concat(l,".").concat(u)]||s[u]||c[u]||a;return t?o.createElement(f,p(p({ref:n},m),{},{components:t})):o.createElement(f,p({ref:n},m))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,p=new Array(a);p[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[s]="string"==typeof e?e:r,p[1]=i;for(var d=2;d<a;d++)p[d]=t[d];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=t(5773),r=(t(7378),t(5318));const a={sidebar_position:20},p="models.json",i={unversionedId:"project/models.json",id:"project/models.json",title:"models.json",description:"The available models.",source:"@site/docs/project/models.json.md",sourceDirName:"project",slug:"/project/models.json",permalink:"/ai-writer/docs/project/models.json",draft:!1,editUrl:"https://github.com/svdoever/ai-writer/tree/main/docs/docs/project/models.json.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"docSidebar",previous:{title:"The .env file",permalink:"/ai-writer/docs/project/dotenv"},next:{title:"output-formats.json",permalink:"/ai-writer/docs/project/output-formats.json"}},l={},d=[{value:"The structure of models.json",id:"the-structure-of-modelsjson",level:2},{value:"Override the default model for a recipe",id:"override-the-default-model-for-a-recipe",level:2},{value:"Example model.json file",id:"example-modeljson-file",level:2},{value:"Azure OpenAI Service models",id:"azure-openai-service-models",level:2}],m={toc:d},s="wrapper";function c(e){let{components:n,...a}=e;return(0,r.kt)(s,(0,o.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modelsjson"},"models.json"),(0,r.kt)("p",null,"The available models."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," file lives in the root of the project folder. This file contains model configurations, the default model to use, and configuration per recipe of the model to use."),(0,r.kt)("h2",{id:"the-structure-of-modelsjson"},"The structure of models.json"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," file contains a JSON object with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "defaultModel": "<model-name>",\n    "recipeDefaultModel": {\n        "<recipe-name>": "<model-name>",\n        :\n    },\n    "modelConfigurations": {\n       "<model-name>": {\n            "description": "Description of the model",\n            "provider": "Azure | OpenAI",\n            "type": "completion | chat.completion",\n            "completion": {\n                "model": "model-id",\n                "temperature": 0.7,\n                "max_tokens": 64,\n                "top_p": 1,\n                "frequency_penalty": 0,\n                "presence_penalty": 0\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultModel")," specifies the model name that is used for a recipe when no explicit model name is specified for a recipe in the ",(0,r.kt)("inlineCode",{parentName:"p"},"recipeDefaultModel")," element."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"recipeDefaultModel")," element gives the opportunity to specify the default model to use for the specific recipe. So it possible to have each recipe to use its own model, e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    "recipeDefaultModel": {\n        "eli5": "azure-gpt-35",\n        "starwars-story": "azure-davinci",\n        "bike-description": "openai-gpt-4"\n    },\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"modelConfigurations")," element contains a configuration per model, where each model has a name, a ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", a provider (",(0,r.kt)("inlineCode",{parentName:"p"},"Azure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAI")," for now), and the ",(0,r.kt)("inlineCode",{parentName:"p"},"completion")," configuration."),(0,r.kt)("p",null,"There are two types of completions for the ",(0,r.kt)("strong",{parentName:"p"},"Azure")," and ",(0,r.kt)("strong",{parentName:"p"},"OpenAI")," providers: ",(0,r.kt)("inlineCode",{parentName:"p"},"completion")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"completion")," type is used for completion models like ",(0,r.kt)("inlineCode",{parentName:"p"},"text-davinci-003"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion")," type is used for chatbot models that are also really good at completion like ",(0,r.kt)("inlineCode",{parentName:"p"},"gtp-3.5-turbo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-4"),"."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference/completions/create"},"OpenAI API documentation")," for more information about the model configuration fields."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"completion")," section is passed to the ",(0,r.kt)("strong",{parentName:"p"},"Azure")," and ",(0,r.kt)("strong",{parentName:"p"},"OpenAI"),' APIs "as"is".'),(0,r.kt)("h2",{id:"override-the-default-model-for-a-recipe"},"Override the default model for a recipe"),(0,r.kt)("p",null,"On execution of a recipe, the default model configuration can be overridden using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--model-override")," option of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ai-writer")," command. For example, to use the OpenAI ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-4")," model, execute the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx ai-writer eli5 --topic elephant --model-override openai-gpt-4 --output eli5/elephant\n")),(0,r.kt)("h2",{id:"example-modeljson-file"},"Example model.json file"),(0,r.kt)("p",null,"The example ",(0,r.kt)("inlineCode",{parentName:"p"},"model.json")," file delivered by AI-Writer has support for the following model configurations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"azure-gpt-4")," - uses Azure OpenAI Service, ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-4")," model (publish model by that name)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"azure-gpt-35")," - uses Azure OpenAI Service, ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-35-turbo")," model (publish model by that name)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"azure-davinci")," - uses Azure OpenAI Service, ",(0,r.kt)("inlineCode",{parentName:"p"},"completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"text-davinci-003")," model (publish model by that name)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"openai-gpt-4")," - uses OpenAI API, ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-4")," model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"openai-gpt-35")," - uses OpenAI API, ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-3.5-turbo")," model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"openai-davinci")," - uses OpenAI API, ",(0,r.kt)("inlineCode",{parentName:"p"},"completion"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"text-davinci-003")," model"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," configuration is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "defaultModel": "azure-gpt-35",\n    "recipeDefaultModel": {\n        "eli5": "azure-gpt-35",\n        "starwars-story": "azure-gpt-35",\n        "bike-description": "azure-gpt-35"\n    },\n    "modelConfigurations": {\n        "azure-gpt-4": {\n            "description": "Azure OpenAI gpt-4",\n            "provider": "Azure",\n            "type": "chat.completion",\n            "completion": {\n                "model": "gpt-4",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        },\n        "azure-gpt-35": {\n            "description": "Azure OpenAI gpt-35-turbo",\n            "provider": "Azure",\n            "type": "chat.completion",\n            "completion": {\n                "model": "gpt-35-turbo",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        },\n        "azure-davinci": {\n            "description": "Azure OpenAI text-davinci-003",\n            "provider": "Azure",\n            "type": "completion",\n            "completion": {\n                "model": "text-davinci-003",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        },\n        "openai-gpt-4": {\n            "description": "OpenAI gpt-4",\n            "provider": "OpenAI",\n            "type": "chat.completion",\n            "completion": {\n                "model": "gpt-4",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        },\n        "openai-gpt-35": {\n            "description": "OpenAI gpt-3.5-turbo",\n            "provider": "OpenAI",\n            "type": "chat.completion",\n            "completion": {\n                "model": "gpt-3.5-turbo",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        },\n        "openai-davinci": {\n            "description": "OpenAI text-davinci-003",\n            "provider": "OpenAI",\n            "type": "completion",\n            "completion": {\n                "model": "text-davinci-003",\n                "max_tokens": 1000,\n                "temperature": 0.0,\n                "top_p": 1,\n                "presence_penalty": 0.0,\n                "frequency_penalty": 0.0\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Modify this file to your own needs."),(0,r.kt)("h2",{id:"azure-openai-service-models"},"Azure OpenAI Service models"),(0,r.kt)("p",null,"On Azure you need to deploy models explicitly by a name that you have to choose yourself. This deployment is done in ",(0,r.kt)("strong",{parentName:"p"},"Azure AI Studio")," under ",(0,r.kt)("strong",{parentName:"p"},"Deployments"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Azure AI Studio - deployments",src:t(2061).Z,width:"2058",height:"1100"})),(0,r.kt)("p",null,"When creating a model deployment you can select one of the base models. Where possible use the samen model name as the base models:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Azure AI Studio - select model",src:t(382).Z,width:"2058",height:"1100"})),(0,r.kt)("p",null,"For each model that you want to access from the ",(0,r.kt)("inlineCode",{parentName:"p"},"models.json")," file, create a corresponding model deployment:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Azure AI Studio - multiple model deployments",src:t(437).Z,width:"2058",height:"1100"})))}c.isMDXComponent=!0},437:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Azure AI Studio - multiple-models-created-100beaa5fde767c424eb27702f650219.png"},2061:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Azure AI Studio - no deployments yet-15f58392e8196edb922dcb0aad4b055f.png"},382:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Azure AI Studio - select model-9711cd245cea50e8602914bfc90c32ae.png"}}]);